import streamlit as st
import pandas as pd
import numpy as np
import altair as alt

st.title("ğŸ§  Trend Radar - ÃœrÃ¼n Performans Analizi")

# Ã–rnek veri oluÅŸtur (KadÄ±n Elbise ve Erkek TiÅŸÃ¶rt kategorileri)
kategoriler = ["KadÄ±n Elbise", "Erkek TiÅŸÃ¶rt"]
urunler = []

for kategori in kategoriler:
    for i in range(1, 11):
        urun = {
            "Urun_Adi": f"{kategori.split()[0]} ÃœrÃ¼n {i}",
            "Kategori": kategori,
            "CTR": round(np.random.uniform(0.5, 5.0), 2),
            "CR": round(np.random.uniform(0.5, 4.0), 2),
            "STR": round(np.random.uniform(0.3, 2.0), 2),
            "Stok_Adedi": np.random.randint(50, 500),
            "Satis_Adedi": np.random.randint(10, 400),
            "Aciklama": f"{kategori} kategorisinde Ã¶ne Ã§Ä±kan bir Ã¼rÃ¼n.",
            "Gorsel": "https://via.placeholder.com/100"
        }
        urunler.append(urun)

df = pd.DataFrame(urunler)

# Cover Rate hesapla (Stok / SatÄ±ÅŸ)
df["Cover_Rate"] = df["Stok_Adedi"] / df["Satis_Adedi"].replace(0, np.nan)

# Z-skor hesaplamalarÄ±
cover_z = (df["Cover_Rate"] - df["Cover_Rate"].mean()) / df["Cover_Rate"].std()
ctr_z = (df["CTR"] - df["CTR"].mean()) / df["CTR"].std()
cr_z = (df["CR"] - df["CR"].mean()) / df["CR"].std()
str_z = (df["STR"] - df["STR"].mean()) / df["STR"].std()

# Trend Skoru hesapla (eÅŸit aÄŸÄ±rlÄ±klÄ± ortalama, Cover ters iÅŸaretli)
df["Trend_Skoru"] = (ctr_z + cr_z + str_z - cover_z) / 4

# Kategori seÃ§imi
kategori_secimi = st.selectbox("Kategori SeÃ§in:", options=df["Kategori"].unique())

# Kategoriye gÃ¶re filtrele
df_kategori = df[df["Kategori"] == kategori_secimi].sort_values(by="Trend_Skoru", ascending=False)

# Trend skoru eÅŸiÄŸi
trend_esik = st.slider("Trend Skoru EÅŸiÄŸi", min_value=-2.0, max_value=2.0, value=0.5, step=0.1)

# Trend Ã¼rÃ¼nler
df_kategori["Trend"] = df_kategori["Trend_Skoru"] >= trend_esik
trend_urunler = df_kategori[df_kategori["Trend"]]

# Fonksiyon: ÃœrÃ¼n performansÄ±nÄ± Ã¶zetleyen kÄ±sa ve etkileyici aÃ§Ä±klama Ã¼ret
@st.cache_data
def performans_ozeti(row):
    urun_adi = row["Urun_Adi"]
    mesaj = "âš¡ Bu Ã¼rÃ¼n, yÃ¼ksek etkileÅŸim ve gÃ¼Ã§lÃ¼ dÃ¶nÃ¼ÅŸÃ¼m oranÄ±yla Ã¶ne Ã§Ä±kÄ±yor. Trend dalgasÄ±nÄ± yakaladÄ±."
    post = f"âœ¨ Yeni trend alarmÄ±! {urun_adi} bu hafta satÄ±ÅŸ ve ilgide zirveye oynuyor. Sen de kaÃ§Ä±rma! ğŸ”¥ #trendÃ¼rÃ¼n #stil #yenisezon"
    return mesaj + "\n\n**ğŸ“£ Sosyal Medya Ã–nerisi:**\n" + post

# ÃœrÃ¼nleri gÃ¶ster
st.subheader("ğŸ”¥ Trend ÃœrÃ¼nler")
for _, row in trend_urunler.iterrows():
    with st.container():
        cols = st.columns([1, 3])
        with cols[0]:
            st.image(row["Gorsel"], width=100)
        with cols[1]:
            st.markdown(f"**{row['Urun_Adi']}**")
            st.caption(f"{row['Aciklama']}")
            st.write(f"Trend Skoru: `{row['Trend_Skoru']:.2f}`")
            with st.expander("ğŸ§  Yapay Zeka Yorumu"):
                st.markdown(performans_ozeti(row))

# Grafik
st.subheader("ğŸ“Š Trend Skoru GrafiÄŸi")
grafik = alt.Chart(df_kategori).mark_bar().encode(
    x=alt.X("Urun_Adi", sort="-y"),
    y="Trend_Skoru",
    color=alt.condition(
        f"datum.Trend_Skoru >= {trend_esik}",
        alt.value("green"),
        alt.value("lightgray")
    ),
    tooltip=["Urun_Adi", "Trend_Skoru"]
).properties(width=700)

st.altair_chart(grafik, use_container_width=True)

st.info("Bu prototipte Ã¶rnek veriler kullanÄ±lmaktadÄ±r. GerÃ§ek veri entegrasyonu yapÄ±labilir.")
